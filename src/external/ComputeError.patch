diff --git a/src/Core/BlockSolvers/ConstrainedSolverBase.impl.hpp b/src/Core/BlockSolvers/ConstrainedSolverBase.impl.hpp
index 5fd30c2..91967ce 100644
--- a/src/Core/BlockSolvers/ConstrainedSolverBase.impl.hpp
+++ b/src/Core/BlockSolvers/ConstrainedSolverBase.impl.hpp
@@ -77,7 +77,7 @@ ConstrainedSolverBase< SolverType,BlockMatrixType >::eval( const NSLaw &law,
 			err += lres ;
 		}
 
-		return err / ( 1 + n );
+		return sqrt(err);
 
 	}
 }
diff --git a/src/Core/BlockSolvers/GaussSeidel.impl.hpp b/src/Core/BlockSolvers/GaussSeidel.impl.hpp
index 7a0a274..df7cce1 100644
--- a/src/Core/BlockSolvers/GaussSeidel.impl.hpp
+++ b/src/Core/BlockSolvers/GaussSeidel.impl.hpp
@@ -16,6 +16,9 @@
 #include "Coloring.impl.hpp"
 #include "GaussSeidelBase.impl.hpp"
 
+#include <FrictionContactProblem.h>
+#include <NumericsMatrix.h>
+
 #ifndef BOGUS_DONT_PARALLELIZE
 #include <omp.h>
 #endif
@@ -147,7 +150,8 @@ typename GaussSeidel< BlockMatrixType >::Scalar GaussSeidel< BlockMatrixType >::
 
 			y = b ;
 			m_matrix->template multiply< false >( x, y, 1, 1 ) ;
-			const double err = Base::eval( law, y, x ) ;
+
+			const double err = Base::eval( law, y, x ) / (1. + b.norm());
 
 			this->m_callback.trigger( GSIter, err ) ;
 
diff --git a/src/Extra/SOC/SOCLaw.hpp b/src/Extra/SOC/SOCLaw.hpp
index dafe474..86d687a 100644
--- a/src/Extra/SOC/SOCLaw.hpp
+++ b/src/Extra/SOC/SOCLaw.hpp
@@ -27,6 +27,9 @@
 
 #include <vector>
 
+// Siconos Numerics
+#include <projectionOnCone.h>
+
 namespace bogus
 {
 
@@ -55,15 +58,34 @@ public:
 
 	//! \return \f$ \vert fb( mu, x, y ) \vert^2_2 \f$, where fb is the SOC Fischer-Burmeister function
 	Scalar eval( const unsigned problemIndex,
-				 const typename Traits::Vector &x,
-				 const typename Traits::Vector &y ) const
+				 const typename Traits::Vector &z,
+				 const typename Traits::Vector &w ) const
 	{
 		typedef FischerBurmeister< Traits::dimension, typename Traits::Scalar, DeSaxceCOV > FBFunction ;
 
-		typename Traits::Vector fb( x.rows() ) ;
-		FBFunction::compute( m_mu[problemIndex], x, y, fb ) ;
+		typename Traits::Vector fb( z.rows() ) ;
+
+    double normUT;
+    double rho = 1.0;
+    double mu = m_mu[problemIndex];
+    double worktmp[3];
+    double error = 0.;
+
+
+    /* Compute the modified local velocity */
+    normUT = hypot(w[1], w[2]); // i.e sqrt(w[ic3p1]*w[ic3p1]+w[ic3p2]*w[ic3p2]);
+    worktmp[0] = z[0] - rho * (w[0] + mu * normUT);
+    worktmp[1] = z[1] - rho * w[1] ;
+    worktmp[2] = z[2] - rho * w[2] ;
+    projectionOnCone(worktmp, mu);
+    worktmp[0] = z[0] -  worktmp[0];
+    worktmp[1] = z[1] -  worktmp[1];
+    worktmp[2] = z[2] -  worktmp[2];
+    error +=  worktmp[0] * worktmp[0] + worktmp[1] * worktmp[1] + worktmp[2] * worktmp[2];
+
+		//FBFunction::compute( m_mu[problemIndex], x, y, fb ) ;
 
-		return fb.squaredNorm() ;
+		return error;
 	}
 
 	//! Solves the local problem
